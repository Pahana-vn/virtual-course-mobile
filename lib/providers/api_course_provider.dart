import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/course_dto.dart';
import '../services/api_course_service.dart';

/// üü¢ Provider cho `ApiCourseService`
final apiCourseServiceProvider = Provider<ApiCourseService>((ref) {
  return ApiCourseService();
});

/// üü¢ FutureProvider ƒë·ªÉ l·∫•y danh s√°ch t·∫•t c·∫£ kh√≥a h·ªçc
final allCoursesProvider = FutureProvider<List<CourseDTO>>((ref) async {
  try {
    final service = ref.watch(apiCourseServiceProvider);
    return await service.fetchAllCourses();
  } catch (e) {
    print('‚ùå L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc: $e');
    throw Exception('L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc');
  }
});

/// üü¢ FutureProvider ƒë·ªÉ l·∫•y th√¥ng tin kh√≥a h·ªçc theo ID
final courseByIdProvider = FutureProvider.family<CourseDTO, int>((ref, courseId) async {
  try {
    final service = ref.watch(apiCourseServiceProvider);
    return await service.fetchCourseById(courseId);
  } catch (e) {
    print('‚ùå L·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc ID: $courseId - $e');
    throw Exception('L·ªói khi l·∫•y th√¥ng tin kh√≥a h·ªçc ID: $courseId');
  }
});

/// üü¢ FutureProvider ƒë·ªÉ l·∫•y danh s√°ch kh√≥a h·ªçc theo danh m·ª•c
final coursesByCategoryProvider = FutureProvider.family<List<CourseDTO>, int>((ref, categoryId) async {
  try {
    final service = ref.watch(apiCourseServiceProvider);
    return await service.fetchCoursesByCategoryId(categoryId);
  } catch (e) {
    print('‚ùå L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc theo danh m·ª•c ID: $categoryId - $e');
    throw Exception('L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc theo danh m·ª•c');
  }
});

/// üü¢ FutureProvider ƒë·ªÉ l·∫•y chi ti·∫øt kh√≥a h·ªçc (c√≥ Sections & Lectures)
final courseDetailsProvider = FutureProvider.autoDispose.family<CourseDTO, Map<String, int>>((ref, params) async {
  final apiService = ref.watch(apiCourseServiceProvider);
  final int courseId = params['courseId']!;
  final int studentId = params['studentId']!;

  print('üì° Fetching CourseID: $courseId - StudentID: $studentId');

  final course = await apiService.fetchCourseDetails(courseId, studentId);

  print('‚úÖ Course loaded: ${course.titleCourse}, Sections: ${course.sections.length}');

  return course;
});
